{
   "Store With APIService": {
      "prefix": "swa",
      "body": [
         "import { observable, action, computed } from 'mobx'",
         "import { bindPromiseWithOnSuccess } from '@ib/mobx-promise'",
         "import { API_INITIAL, APIStatus } from '@ib/api-constants'",
         "",
         "import {${2:ApiService}} from '../../services/${2:ApiService}'",
         "",
         "export class ${1:StoreName}{",
         "  apiService: ${2:ApiService}",
         "  @observable get${3:LocalDataObject}APIStatus!: APIStatus",
         "  @observable get${3:LocalDataObject}APIError!: Error | null",
         "",
         "  constructor(apiService: ${2:ApiService}) {",
         "    this.apiService = apiService",
         "    this.init()",
         "  }",
         "",
         "  @action.bound",
         "  init() {",
         "    this.get${3:LocalDataObject}APIStatus = API_INITIAL",
         "    this.get${3:LocalDataObject}APIError = null",
         "  }",
         "",
         "  @action.bound",
         "  setGet${3:LocalDataObject}APIStatus(status) {",
         "    this.get${3:LocalDataObject}APIStatus = status",
         "  }",
         "",
         "  @action.bound",
         "  setGet${3:LocalDataObject}APIError(error) {",
         "    this.get${3:LocalDataObject}APIError = error",
         "  }",
         "",
         "  @action.bound",
         "  set${3:LocalDataObject}Response(response:any | null) {",
         "    if (response) {}",
         "  }",
         "",
         "  @action.bound",
         "  get${3:LocalDataObject}Data() {",
         "    const {setGet${3:LocalDataObject}APIStatus, setGet${3:LocalDataObject}APIError, set${3:LocalDataObject}Response,apiService} = this;",
         "    const get${3:LocalDataObject}Promise = apiService.get${4:DataServiceFunctionCall}API()",
         "    return bindPromiseWithOnSuccess(get${3:LocalDataObject}Promise)",
         "      .to(setGet${3:LocalDataObject}APIStatus, set${3:LocalDataObject}Response)",
         "      .catch(setGet${3:LocalDataObject}APIError)",
         "  }",
         "",
         "  clearStore = () => this.init()",
         "}",
         ""
      ],
      "description": "It Populates a Store Structured data with ApiService also"
   },
   "Custom Basic Store": {
      "prefix": "cbs",
      "body": [
         "import { observable, action, computed } from 'mobx'",
         "export class ${1:StoreName} {",
         "   @observable variable",
         "   constructor() {",
         "      this.init()",
         "   }",
         "   @action.bound",
         "   init() {}",
         "",
         "   clearStore = () => this.init()",
         "}",
         ""
      ],
      "description": "Custom Basic Store"
   },
   "Custom Api Functions Set": {
      "prefix": "cafs",
      "body": [
         "  @action.bound",
         "  setGet${1:LocalDataObject}APIStatus(status) {",
         "    this.get${3:LocalDataObject}APIStatus = status",
         "  }",
         "",
         "  @action.bound",
         "  setGet${1:LocalDataObject}APIError(error) {",
         "    this.get${3:LocalDataObject}APIError = error",
         "  }",
         "",
         "  @action.bound",
         "  set${1:LocalDataObject}Response(response:any | null) {",
         "    if (response) {}",
         "  }",
         "",
         "  @action.bound",
         "  get${3:LocalDataObject}Data() {",
         "    const {setGet${1:LocalDataObject}APIStatus, setGet${1:LocalDataObject}APIError, set${1:LocalDataObject}Response,apiService} = this;",
         "    const get${1:LocalDataObject}Promise = apiService.get${2:DataServiceFunctionCall}API()",
         "    return bindPromiseWithOnSuccess(get${3:LocalDataObject}Promise)",
         "      .to(setGet${1:LocalDataObject}APIStatus, set${1:LocalDataObject}Response)",
         "      .catch(setGet${1:LocalDataObject}APIError)",
         "  }"
      ],
      "description": "Store with Api function Set"
   }
}
